# -*- coding: utf-8 -*-
"""non_maximum_supression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179BVwjGO5lseB0MYcmPAoWi3CJc5H_Po
"""

def non_maximum_supression(gradient_magnitude, gradient_angle):
  gradient_angle[gradient_angle < 0] += 180
  potential_edges = np.zeros(gradient_angle.shape)
  for y in range(1, gradient_angle.shape[0]-2):
    for x in range(1, gradient_angle.shape[1]-2):
      if (gradient_angle[y,x]>=0 and gradient_angle[y,x]<22.5) or (gradient_angle[y,x]>=157.5 and gradient_angle[y,x]<=180):   # --- 
        neighbour1 = gradient_magnitude[y, x-1]
        neighbour2 = gradient_magnitude[y, x+1]
      elif (gradient_angle[y,x]>=22.5 and gradient_angle[y,x]<67.5):   # /
        neighbour1 = gradient_magnitude[y+1, x-1]
        neighbour2 = gradient_magnitude[y-1, x+1]
      elif (gradient_angle[y,x]>=67.5 and gradient_angle[y,x]<112.5):   # |
        neighbour1 = gradient_magnitude[y-1, x]
        neighbour2 = gradient_magnitude[y+1, x]
      elif (gradient_angle[y,x]>=112.5 and gradient_angle[y,x]<157.5):   # \
        neighbour1 = gradient_magnitude[y-1, x-1]
        neighbour2 = gradient_magnitude[y+1, x+1]
        
      if (gradient_magnitude[y,x] > neighbour1) and (gradient_magnitude[y,x] > neighbour2):
        potential_edges[y,x] = gradient_magnitude[y,x]

  return potential_edges