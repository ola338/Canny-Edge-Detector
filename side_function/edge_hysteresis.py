# -*- coding: utf-8 -*-
"""edge_hysteresis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/179BVwjGO5lseB0MYcmPAoWi3CJc5H_Po
"""

def edge_hysteresis(strong_edges, weak_edges):  
  strong_value = np.max(strong_edges)
  weak_value = np.max(weak_edges)

  image_neighbours = {}
  for y in range(1, strong_edges.shape[0]-2):
    for x in range(1, strong_edges.shape[1]-2):
      neighbours = [(y-1,x-1), (y-1,x), (y-1,x+1), (y,x-1), (y,x+1), (y+1,x-1), (y+1,x), (y+1,x+1)]
      image_neighbours[(y,x)] = neighbours              # klucz-piksel, wartości-sąsiedzi

  visited = [] 
  queue = Queue()   
  edges = strong_edges + weak_edges

  for y in range(1, edges.shape[0]-2):
    for x in range(1, edges.shape[1]-2):
      if (edges[y,x] == strong_value): 
        seed = (y,x)
        visited.append(seed)
        queue.put(seed) 
        while queue.empty() == False: 
          pixel = queue.get()
          for neighbour in image_neighbours[pixel]:    
            if neighbour not in visited:
              visited.append(neighbour)
              if (edges[neighbour] == weak_value):
                queue.put(neighbour)
                edges[neighbour] = strong_value
  
  edges[np.where(edges == weak_value)] = 0
  return edges